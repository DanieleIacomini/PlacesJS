<!doctype html>
<html>

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>PlacesJS</title>
    <link href="/stylesheets/style.css" rel="stylesheet" type="text/css">
    <link href="/stylesheets/style3.css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <style>
        /* Always set the map height explicitly to define the size of the div
         * element that contains the map. */
        #map {
          height: 90%;
        }
        /* Optional: Makes the sample page fill the window. */
        html, body {
          height: 100%;
          margin: 0;
          padding: 0;
        }
        .stile1 { color: #FF0000 }
      </style>
</head>
<body>
        <% if (!user) { %>
          <nav>
              <ul>
                <li><a href="home"><i class="fa fa-fw fa-home"></i> Home</a></li>
                <li><a href="about"><i class="fa fa-fw fa-info-circle"></i> About App</a></li>
                <li><a href="contatti"><i class="fa fa-fw fa-user"></i> Contacts</a></li>
                <li><a href="signup"><i class="fa fa-fw fa-user-plus"></i> Signup</a></li>
                <li><a href="login"><i class="fa fa-fw fa-sign-in"></i> Login</a></li>
                
          
              </ul>
            </nav>
            
            <div style="width:850px;height:350px;background-color:transparent;padding:75px;margin-left:5%;margin-top:8%;box-shadow: 0 8px 16px 0 black;">
                <div class="img">
                    <img src="stylesheets/img/JasonHawkesLondonStory18n.jpg">
                  </div>
              <h1>PlacesJS</h1>
            </br>
            <p>Fai il login per cercare punti d'interesse in tutto il mondo!<p>
          </br>           
          <p>L'applicazione da la possibilità, <b>ai soli utenti registrati</b> , di localizzarsi e cercare punti d'interesse in un range prestabilito.</p>
          <br>
          <p>
            <span class="stile1">Rest API</span><br><br>
            <b>Google Api</b>:<br>
              -<i>Geocode</i>: tramite una get passando l'indirizzo del luogo richiesto ci ritorna le sue informazioni dalle quali verranno prese latitudine e longitudine.<br>

              -<i>NearbySearch</i>: si effettua una richiesta passando latitudine, longitudine, il tipo di cosa si sta ricercando e il raggio d'interesse per trovare un insieme di luoghi di quel tipo.
            <br><br>
            <b>OAUTH</b><br>
              <i>Facebook Login</i>: Implementato con Passport, richiede l'autenticazione e restituisce le informazioni base del proprio profilo(id,nome,email,photo), e queste informazioni vengono memorizzate come .json nella collection users del database.
          </p>
            <% } else { %>
              <nav>
                  <ul>
                    <li><a href="home"><i class="fa fa-fw fa-home"></i> Home</a></li>
                    <li><a href="about"><i class="fa fa-fw fa-info-circle"></i> About App</a></li>
                    <li><a href="contatti"><i class="fa fa-fw fa-user"></i> Contacts</a></li>
                    <li><a href="profile"><i class="fa fa-fw fa-user"></i> Profile</a></li>
                    <li><a href="chat"><i class="fa fa-comments"></i> Chat</a></li> 
                    <li><a href="logout"><i class="fa fa-fw fa-sign-out"></i> Logout</a></li>
                    
              
                  </ul>
                </nav>
                <br><br><br>
                <div style="width:1000px;height:400px;background-color:transparent;padding:95px;margin-left:2%;margin-top:3%;background-color:transparent;box-shadow: 0 8px 16px 0 black;">
                    <div class="img">
                        <img src="stylesheets/img/JasonHawkesLondonStory18n.jpg">
                      </div>
                  <h1>PlacesJS</h1>
                  <div id="floating-panel">
                      <input id="address" type="text" placeholder="Choose an address..">
                      <input id="submit" type="button" value="   Go to    ">
                      <input id="what" type="text" placeholder="What are you looking for?">
                      <input id="sushi" type = "button" value="Search">
                      <input id="delete" type = "button" value="Clear all">
                    </div>
                    <br>
                    <br>
                    <div id="map"></div>
                    </div>
                     
                    <script>
                  
              var markers=[];
              let pos;
              let map;
              let bounds;
              let infoWindow;
              let currentInfoWindow;
              let service;
              let infoPane;
          
              function initMap() {
                // Initialize variables
                bounds = new google.maps.LatLngBounds();
                infoWindow = new google.maps.InfoWindow;
                currentInfoWindow = infoWindow;
                var geocoder = new google.maps.Geocoder();
          
                // Try HTML5 geolocation
                if (navigator.geolocation) {
                  navigator.geolocation.getCurrentPosition(position => {
                    pos = {
                      lat: position.coords.latitude,
                      lng: position.coords.longitude
                    };
                    map = new google.maps.Map(document.getElementById('map'), {
                      center: pos,
                      zoom: 14
                    });
                    bounds.extend(pos);
          
                    infoWindow.setPosition(pos);
                    infoWindow.setContent('Antenna più vicina.');
                    infoWindow.open(map);
                    map.setCenter(pos);
                    //BUTTON LISTENERS
                    document.getElementById('submit').addEventListener('click', function() {
                          geocodeAddress(geocoder, map);
                        });
                    document.getElementById('sushi').addEventListener('click', function() {
                    // Call Places Nearby Search on user's location
                        deleteMarkers();
                        getNearbyPlaces(pos);
                         });
                    document.getElementById('delete').addEventListener('click', function() {
                    //Delete markers in the map
                        deleteMarkers();
                         });
                  }, () => {
                    // Browser supports geolocation, but user has denied permission
                    handleLocationError(true, infoWindow);
                  });
                } else {
                  // Browser doesn't support geolocation
                  handleLocationError(false, infoWindow);
                }
              }
              
              function deleteMarkers() {
                for (var i = 0; i < markers.length; i++) {
                  markers[i].setMap(null);
                }
                markers = [];
              }
              // Handle a geolocation error
              function handleLocationError(browserHasGeolocation, infoWindow) {
                // Set default location to Sydney, Australia
                pos = { lat: -33.856, lng: 151.215 };
                map = new google.maps.Map(document.getElementById('map'), {
                  center: pos,
                  zoom: 15
                });
          
                // Display an InfoWindow at the map center
                infoWindow.setPosition(pos);
                infoWindow.setContent(browserHasGeolocation ?
                  'Geolocation permissions denied. Using default location.' :
                  'Error: Your browser doesn\'t support geolocation.');
                infoWindow.open(map);
                currentInfoWindow = infoWindow;
          
                // Call Places Nearby Search on the default location
                getNearbyPlaces(pos);
              }
          
              // Perform a Places Nearby Search Request
              function getNearbyPlaces(position) {
                let request = {
                  location: position,
                  radius: 600,
                  keyword: document.getElementById('what').value
                };
          
                service = new google.maps.places.PlacesService(map);
                service.nearbySearch(request, nearbyCallback);
              }
          
              // Handle the results (up to 20) of the Nearby Search
              function nearbyCallback(results, status) {
                if (status == google.maps.places.PlacesServiceStatus.OK) {
                  createMarkers(results);
                }
              }
          
              // Set markers at the location of each place result
              function createMarkers(places) {
                places.forEach(place => {
                  var marker = new google.maps.Marker({
                    position: place.geometry.location,
                    map: map,
                    title: place.name,
                  });          
                  // Adjust the map bounds to include the location of this marker
                  bounds.extend(place.geometry.location);
                  markers.push(marker);
                });
              }
          
              function geocodeAddress(geocoder, resultsMap) {
                        var address = document.getElementById('address').value;
                        geocoder.geocode({'address': address}, function(results, status) {
                          if (status === 'OK') {
                            resultsMap.setCenter(results[0].geometry.location);
                            var marker = new google.maps.Marker({
                              map: resultsMap,
                              position: results[0].geometry.location
                            });
                            markers.push(marker);
                            pos = results[0].geometry.location;
                          } else {
                            alert('Geocode was not successful for the following reason: ' + status);
                          }
                        });
                      }
          
                    </script>
                    
                    <script async defer
                    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAQqaqAKv0m6sSP-n5J4si0umvvtwFaRJ4&libraries=places&callback=initMap">
                    </script>
            <% } %>
</body>
</html>
